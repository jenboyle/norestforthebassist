/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.0.4
 * Generated at: 2021-04-18 23:02:36 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import norestforthebassist.Hello;
import java.sql.*;

public final class anyscale_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("norestforthebassist.Hello");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<link href=\"resources/css/main.css\" rel=\"stylesheet\">\n");
      out.write("<script type=\"text/javascript\" src=\"resources/json/scales.json\"></script>\n");
      out.write("<script src=\"resources/js/differentscales.js\"></script>\n");
      out.write("<title>No Rest For The Bassist</title>\n");
      out.write("</head>\n");
String scaleName = request.getParameter("scalename"); 
      out.write('\n');
String title = request.getParameter("title"); 
      out.write('\n');
int id = Integer.parseInt(request.getParameter("id")); 
      out.write("\n");
      out.write("<body onload=\"nextScale('");
      out.print( scaleName );
      out.write("')\">\n");
      out.write("    <h1>No Rest For The Bassist</h1>\n");
      out.write("    <table>\n");
      out.write("        <tr>\n");
      out.write("            <td style = \"width: 160px;\">\n");
      out.write("                ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "sidebar.html", out, true);
      out.write("\n");
      out.write("            </td>\n");
      out.write("            <td style = \"vertical-align: top\">\n");
      out.write("                <h2>");
out.print(title); 
      out.write("</h2>\n");
      out.write("\n");

Class.forName("com.mysql.cj.jdbc.Driver");
Connection conn = DriverManager.getConnection(
    "jdbc:mysql://localhost:3306/norestforthebassist", "root", "Ilike2playbass$");
Statement stmt = conn.createStatement();
ResultSet rsNotes = stmt.executeQuery("select * from notes where id=" + id);
ResultSetMetaData resMetaData = rsNotes.getMetaData();
int nCols = resMetaData.getColumnCount();

      out.write("\n");
      out.write("<table>\n");
      out.write("<tr><td class=\"tdbold\"></td><td class=\"tdbold\">Root</td><td class=\"tdbold\">2nd</td><td class=\"tdbold\">3rd</td><td class=\"tdbold\">4th</td><td class=\"tdbold\">5th</td><td class=\"tdbold\">6th</td><td class=\"tdbold\">7th</td></tr>\n");

while(rsNotes.next()) {

      out.write("<tr><td class=\"tdbold\">Notes</td>");

for (int kCol=3; kCol < nCols; kCol++){
	out.print("<td>" + rsNotes.getString(kCol) + "</td>");
}

      out.write("</tr>");

}
ResultSet rsChords = stmt.executeQuery("select * from chords where id=" + id);
while(rsChords.next()) {

      out.write("<tr><td class=\"tdbold\">Chords</td>");

for (int kCol=3; kCol < nCols; kCol++){
	out.print("<td>" + rsChords.getString(kCol) + "</td>");
}

      out.write("</tr>");

}
ResultSet rsChordTones = stmt.executeQuery("select * from chord_tones where id=" + id);
while(rsChordTones.next()) {

      out.write("<tr><td class=\"tdbold\">Chord Tones</td>");

for (int kCol=3; kCol < nCols; kCol++){
	out.print("<td>" + rsChordTones.getString(kCol) + "</td>");
}

      out.write("</tr>");

}
      out.write("\n");
      out.write("\n");
      out.write("</table>\n");

conn.close();

      out.write("\n");
      out.write("\n");
      out.write("<table>\n");
      out.write("<tr>\n");
      out.write("<td><div class=\"left_arrow\"><img src=\"resources/images/scrollleft.png\" onclick=\"previousScale('");
      out.print( scaleName );
      out.write("')\"></div></td>\n");
      out.write("<td>\n");
      out.write("                <div class=\"scalebassscore\">\n");
      out.write("                    <img src=\"resources/images/bassscore.png\" alt=\"");
      out.print( title );
      out.write("\" class=\"imgscalebassscore\">\n");
      out.write("                    <div id=\"firstnote\" class=\"a_string_position_1\">3</div>\n");
      out.write("                    <div id=\"secondnote\" class=\"d_string_position_2\">0</div>\n");
      out.write("                    <div id=\"thirdnote\" class=\"d_string_position_3\">2</div>\n");
      out.write("                    <div id=\"forthnote\" class=\"d_string_position_4\">3</div>\n");
      out.write("                    <div id=\"fifthnote\" class=\"g_string_position_5\">0</div>\n");
      out.write("                    <div id=\"sixthnote\" class=\"g_string_position_6\">2</div>\n");
      out.write("                    <div id=\"seventhnote\" class=\"g_string_position_7\">4</div>\n");
      out.write("                    <div id=\"eighthnote\" class=\"g_string_position_8\">5</div>\n");
      out.write("                </div>\n");
      out.write("                </td>\n");
      out.write("                <td><div class=\"right_arrow\"><img src=\"resources/images/scrollright.png\" onclick=\"nextScale('");
      out.print( scaleName );
      out.write("')\"></div></td>\n");
      out.write("</tr>\n");
      out.write("</table>\n");
      out.write("                <table>\n");
      out.write("                    <tr>\n");
      out.write("                        <td style = \"width: 160px;\">\n");
      out.write("                            C bass drone\n");
      out.write("                        </td>\n");
      out.write("                        <td style = \"width: 160px;\">\n");
      out.write("                            <audio src=\"resources/audio/drones/C_bass_drone.mp3\" loop controls>\n");
      out.write("                                Your browser does not support the audio element.\n");
      out.write("                            </audio>\n");
      out.write("                        </td>\n");
      out.write("                    </tr>\n");
      out.write("                </table>\n");
      out.write("            </td>\n");
      out.write("        </tr>\n");
      out.write("    </table>\n");
      out.write("    ");
Hello.hi(); 
      out.write("\n");
      out.write("    \n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
